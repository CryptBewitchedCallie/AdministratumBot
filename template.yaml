AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM template Administratum Discord bot'

# standard Lambda settings
Globals:
  Function:
    Timeout: 900
    MemorySize: 128
    Runtime: python3.9
# define environment variables
Parameters:
  GLOBALAPPID:
    Type: "String"
    Default: ""
    Description: Enter the application ID generated by Discord
  GLOBALPUBLICKEY:
    Type: "String"
    Default: ""
    Description: Enter the public key generated within the Discord developer portal for your application
  GLOBALBOTTOKEN:
    Type: "String"
    Default: ""
    Description: Enter the token generated within the Discord developer portal for your bot
  GLOBALS3BUCKET:
    Type: "String"
    Default: "administratum-test"
    Description: Enter the name of the S3 bucket within your account where the Resources directory exists
  GLOBALWEBHOOKNAME:
    Type: "String"
    Default: "ADMINISTRATUM"
    Description: Enter the name your webhooks should be posted as
  GLOBALWEBHOOKAVATAR:
    Type: "String"
    Default: "https://logos-download.com/wp-content/uploads/2016/02/warhammer-40000-and_bird_logo.png"
    Description: Enter the avatar image url your webhook should use




Resources:

  # S3 resource setup (bucket and policy)
  S3ResourceStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: GLOBALS3BUCKET
  S3ResourcePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: GLOBALS3BUCKET
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref S3ResourceStorage, "/Resources/*" ] ]
            Principal: '*'
          - Action:
              - 's3:ListBucket'
            Effect: Allow
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref S3ResourceStorage ] ]
            Principal: '*'

# The API gateway setup that Discord will talk to
  AdministratumAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: test

# Lambda setup sections
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function that authenticates (or rejects) the message sent from Discord
      Handler: Lambda_Function.lambda_handler
      CodeUri: Lambda/AuthFunction/
      Policies:
        - LambdaInvokePolicy:
            FunctionName:
              Ref: GetWebhookFunction
      Layers:
        - !Ref PyNaClLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /Administratum
            Method: post
            RestApiId: !Ref AdministratumAPIGateway
      Environment:
        Variables:
          PUBLIC_KEY:
            Ref: GLOBALPUBLICKEY
          NEXT_LAMBDA:
            Ref: GetWebhookFunction

  PyNaClLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: PyNaCL layer to allow verification of the signature supplied by Discord
      CompatibleRuntimes:
        - python3.8
      ContentUri: Lambda/AuthFunction/Layers/pynacl-layer.zip
      LayerName: pynacl
      RetentionPolicy: Retain

  GetWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function that identifies the appropriate webhook URL for the message
      Handler: Lambda_Function.lambda_handler
      CodeUri: Lambda/GetWebhookFunction/
      Policies:
        - LambdaInvokePolicy:
            FunctionName:
              Ref: SendWebhookFunction
      Environment:
        Variables:
          APP_ID:
            Ref: GLOBALAPPID
          PUBLIC_KEY:
            Ref: GLOBALPUBLICKEY
          WEBHOOK_NAME:
            Ref: GLOBALWEBHOOKNAME
          WEBHOOK_AVATAR:
            Ref: GLOBALWEBHOOKAVATAR
          BOT_TOKEN:
            Ref: GLOBALBOTTOKEN
          NEXT_LAMBDA:
            Ref: SendWebhookFunction

  SendWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function that sends the requested webhook to the channel
      Handler: Lambda_Function.lambda_handler
      CodeUri: Lambda/SendWebhookFunction/
      Environment:
        Variables:
          APP_ID:
            Ref: GLOBALAPPID
          S3_BUCKET:
            Ref: GLOBALS3BUCKET

  RegisterResourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function that registers slash commands based on the S3 bucket's Resources directory
      Handler: populate_commands.lambda_handler
      CodeUri: Lambda/ResourcesFunction/
      Environment:
        Variables:
          APP_ID:
            Ref: GLOBALAPPID
          BOT_TOKEN:
            Ref: GLOBALBOTTOKEN
          S3_BUCKET:
            Ref: GLOBALS3BUCKET

